// Generated by CoffeeScript 1.7.1
(function() {
  var compare,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _.each(["pop", "push", "shift", "unshift"], function(method) {
    return Collection.prototype["" + method + "Chain"] = function() {
      Array.prototype[method].apply(this, arguments);
      return this;
    };
  });

  compare = function(val1, comp, val2) {
    switch (comp) {
      case "===":
        return val1 === val2;
      case "!==":
        return val1 !== val2;
      case ">":
        return val1 > val2;
      case ">=":
        return val1 >= val2;
      case "<":
        return val1 < val2;
      case "<=":
        return val1 <= val2;
    }
  };

  Collection.prototype.whereArray = function(prop, vals, returnCollection) {
    var element, _i, _len, _ref;
    if (returnCollection == null) {
      returnCollection = true;
    }
    switch (Plotter.util.typeCheck(arr)) {
      case "string":
        vals = [vals];
        break;
      case "array":
        break;
      default:
        throw new Error("Collection::propCheckArr requires a string or array as its second argument.");
    }
    for (_i = 0, _len = this.length; _i < _len; _i++) {
      element = this[_i];
      if (element[prop]) {
        if (_ref = element[prop], __indexOf.call(vals, _ref) >= 0) {
          results.push(element);
        }
      }
    }
    if (returnCollection) {
      return new Collection(results);
    } else {
      return results;
    }
  };


  /*
  opts = [
    { prop: "propA",
      vals: ["val1", "val2"] },
    { prop: "propB",
      vals: ["val3, "val4"] }
  ]
   */

  Collection.prototype.multiWhereArray = function(opts, returnCollection) {
    var args, opt, results, _i, _len, _results;
    if (returnCollection == null) {
      returnCollection = true;
    }
    results = this;
    _results = [];
    for (_i = 0, _len = opts.length; _i < _len; _i++) {
      opt = opts[_i];
      args = [opt.prop, opt.vals, returnCollection];
      _results.push(results = Collection.prototype.whereArray.apply(results, args));
    }
    return _results;
  };


  /*
  opts = [
    { prop: "passYds",
      comp: ">="
      val: 3000 },
    { prop: "age",
      comp: "<"
      val: 28 }
  ]
   */

  Collection.prototype.dynamicFilter = function(opts, returnCollection) {
    var opt, results, _i, _len;
    if (returnCollection == null) {
      returnCollection = true;
    }
    results = this;
    for (_i = 0, _len = opts.length; _i < _len; _i++) {
      opt = opts[_i];
      results = results.filter(function(el) {
        return compare(el[opt.prop], opt.comp, opt.val);
      });
    }
    if (returnCollection) {
      return new Collection(results);
    } else {
      return results;
    }
  };

}).call(this);
