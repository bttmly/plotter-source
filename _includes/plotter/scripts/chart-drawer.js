// Generated by CoffeeScript 1.7.1
(function(App) {
  return App.ChartDrawer = (function() {
    var drawChart, makeScales;
    makeScales = function(vars, data) {
      return App.ScaleMaker(vars, data);
    };
    drawChart = function(vars, data) {
      var c, chartHeight, chartPadding, chartWidth, dotHolder, posColors, r, scales, scatterplot, scatterplotPoints, x, xAxis, y, yAxis;
      vars = {
        xVar: App.settings.statToAbbr[vars["x-var-select"]],
        yVar: App.settings.statToAbbr[vars["y-var-select"]],
        rVar: App.settings.statToAbbr[vars["size-var-select"]],
        cVar: App.settings.statToAbbr[vars["shade-var-select"]]
      };
      App.scales = scales = makeScales(vars, data);
      App.activeVars = vars;
      chartHeight = App.settings.chart.height;
      chartWidth = App.settings.chart.width;
      chartPadding = App.settings.chart.padding;
      posColors = Plotter.settings.posColors;
      x = vars.xVar;
      y = vars.yVar;
      r = vars.rVar;
      c = vars.cVar;
      $(".chart-pane").empty();
      console.log($(".chart-pane").height());
      console.log($(".chart-pane").width());
      scatterplot = d3.select(".chart-pane").append("svg").attr("id", "d3-scatterplot");
      dotHolder = d3.select("#d3-scatterplot").append("g").attr("id", "dot-holder");
      scatterplotPoints = dotHolder.selectAll("circle").data(data).enter().append("circle").attr("cx", function(d) {
        return scales.x(d[x]);
      }).attr("data-x", function(d) {
        return d[x];
      }).attr("cy", function(d) {
        return scales.y(d[y]);
      }).attr("data-y", function(d) {
        return d[y];
      }).attr("r", function(d) {
        if (scales.r && d[r]) {
          return scales.r(d[r]);
        } else {
          return 4;
        }
      }).attr("data-r", function(d) {
        if (scales.r) {
          return d[r];
        }
      }).attr("fill", function(d) {
        var base;
        base = posColors[d.fantPos];
        if (scales.c && d[c]) {
          if (scales.c(d[c]) > 0) {
            return Color(base).lightenByAmount(scales.c(d[c])).desaturateByAmount(scales.c(d[c])).toCSS();
          } else {
            return Color(base).darkenByAmount(0 - scales.c(d[c])).saturateByAmount(0 - scales.c(d[c])).toCSS();
          }
        } else {
          return base;
        }
      }).attr("data-c", function(d) {
        if (scales.c) {
          return d[c];
        }
      }).attr("id", function(d) {
        var id;
        id = "";
        id += d.name.split(" ").join("-").replace(/\./g, "").replace(/'/g, "") + "_";
        id += d.season + "_";
        id += d.fantPos;
        return id;
      }).attr("data-player-name", function(d) {
        return d.name;
      }).attr("data-player-season", function(d) {
        return d.season;
      }).attr("data-player-position", function(d) {
        return d.fantPos;
      }).attr("data-player-team", function(d) {
        return d.team;
      }).attr("class", "scatterplot-point");
      xAxis = d3.svg.axis().scale(scales.x).orient("bottom");
      yAxis = d3.svg.axis().scale(scales.y).orient("left");
      scatterplot.append("g").attr("class", "axis").attr("id", "xAxis").attr("transform", "translate( 0, " + (chartHeight - chartPadding) + " )").call(xAxis);
      scatterplot.append("text").attr("class", "xAxis-label").attr("transform", "translate( " + chartPadding + ", " + (chartHeight - chartPadding / 4) + " )").text(Plotter.settings.abbrToStatRaw[x]);
      scatterplot.append("g").attr("class", "axis").attr("id", "yAxis").attr("transform", "translate( " + chartPadding + ", 0 )").call(yAxis);
      return scatterplot.append("text").attr("class", "yAxis-label").attr("transform", "translate( " + (chartPadding / 4) + ", " + (chartHeight - chartPadding) + ") rotate(-90)").text(Plotter.settings.abbrToStatRaw[y]);
    };
    return drawChart;
  })();
})(window.Plotter);
