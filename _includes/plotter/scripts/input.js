// Generated by CoffeeScript 1.7.1
(function() {
  var CheckComponent, InputBase, InputComponent, InputGroup, InputMaker, SelectComponent,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  InputBase = (function() {
    function InputBase(el) {
      this.el = el;
    }

    InputBase.prototype.value = function() {
      if (arguments.length) {
        return this._setValue(arguments);
      } else {
        if (this._hasValue()) {
          return this.el.value;
        } else {
          return false;
        }
      }
    };

    InputBase.prototype.isFocused = function() {
      return document.activeElement === this.el;
    };

    InputBase.prototype._hasValue = function() {
      return !!this.el.value;
    };

    InputBase.prototype._setValue = function(value) {
      return (this.el.value = value);
    };

    return InputBase;

  })();

  ["addEventListener", "dispatchEvent", "removeEventListener"].forEach(function(method) {
    return InputBase.prototype[method] = EventTarget.prototype[method].apply(this.el, arguments);
  });

  InputComponent = (function(_super) {
    __extends(InputComponent, _super);

    function InputComponent(el) {
      InputComponent.__super__.constructor.call(this, el);
    }

    return InputComponent;

  })(InputBase);

  CheckComponent = (function(_super) {
    __extends(CheckComponent, _super);

    function CheckComponent(el) {
      CheckComponent.__super__.constructor.call(this, el);
    }

    CheckComponent.prototype.checked = CheckComponent.el.checked;

    CheckComponent.prototype.value = function() {
      if (arguments.length) {
        return this._setValue(arguments);
      } else {
        if (this.checked) {
          return CheckComponent.__super__.value.call(this);
        } else {
          return false;
        }
      }
    };

    CheckComponent.prototype.toggle = function() {
      return this.chcked = !this.checked;
    };

    return CheckComponent;

  })(InputBase);

  SelectComponent = (function(_super) {
    __extends(SelectComponent, _super);

    function SelectComponent(el) {
      SelectComponent.__super__.constructor.call(this, el);
    }

    SelectComponent.prototype.value = function() {
      var option;
      return (function() {
        var _i, _len, _ref, _results;
        _ref = this.selected();
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          option = _ref[_i];
          _results.push(option.value);
        }
        return _results;
      }).call(this);
    };

    SelectComponent.prototype.selected = function() {
      return Array.prototype.filter.call(this.el.querySelectorAll("options"), function(option) {
        return option.selected;
      });
    };

    return SelectComponent;

  })(InputBase);

  InputGroup = (function() {
    function InputGroup(selector) {
      var el, els, i, _i, _len;
      els = document.querySelectorAll(selector);
      this.inputs = [];
      for (i = _i = 0, _len = els.length; _i < _len; i = ++_i) {
        el = els[i];
        this.inputs.push(InputMaker(els.item(i)));
      }
      return this.inputs;
    }

    InputGroup.prototype.values = function() {
      var input, _i, _len, _ref, _results;
      _ref = this.inputs;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        _results.push(input.value());
      }
      return _results;
    };

    InputGroup.prototype.formatInputs = function(inputs) {
      if (inputs instanceof NodeList) {
        return inputs;
      } else if (window.jQuery && inputs instanceof jQuery) {
        return jQuery.makeArray(inputs);
      }
    };

    return InputGroup;

  })();

  InputMaker = function(el) {
    switch (el.tagName.toLowerCase()) {
      case "input":
        if (el.type === "radio" || el.type === "checkbox") {
          return new CheckComponent(el);
        } else {
          return new InputComponent(el);
        }
        break;
      case "select":
        return new SelectComponent(el);
      default:
        console.warn("Invalid element passed to InputMaker");
        return false;
    }
  };

}).call(this);
